folder tests:

pm.test("Connection is live", function () {
    pm.response.to.have.header("Connection");
});

pm.test("Response time is less than 1000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(2000);
});

----------------------------
Get Authors :

pm.test("Data Contain id , idbook , firstname , lastname", function () {
    pm.expect(pm.response.text()).to.include("id");
    pm.expect(pm.response.text()).to.include("idBook");
    pm.expect(pm.response.text()).to.include("firstName"); 
    pm.expect(pm.response.text()).to.include("lastName");
});

pm.test("Status is 200 OK", function () {
     pm.expect(pm.response.code).to.be.oneOf([200]); 
});
pm.test("Status OK", function () {
    pm.response.to.have.status("OK");
});

-----------------------------
create Author:

pm.test("Data Contain id ", function () {
    pm.expect(pm.response.text()).to.include("id");
});

pm.test("Data Contain idbook ", function () {
       pm.expect(pm.response.text()).to.include("idBook");
});

pm.test("Data firstname mandtory ", function () {
pm.expect(pm.response.json().firstName).not.equal(null);
    
});

pm.test("Data Contain lastname mandtory", function () {

   pm.expect(pm.response.json().lastName).not.equal(null);
});


pm.test("Status is 200 OK", function () {
    if(pm.expect(pm.response.json().firstName).not.equal(null))
    {
        if(pm.expect(pm.response.json().lastName).not.equal(null))
        {
 pm.globals.set("status", 200);
        }
        else
        {
pm.globals.set("status", 404);
        }
    }
    else
    {
pm.globals.set("status", 404);
    }
     pm.expect(pm.response.code).to.be.oneOf([pm.globals.get("status")]); 
});

-------------------------------------------------
Get books by id :


pm.test("Valid Id Book", function () {
    pm.expect(pm.response.text()).to.include("id");
});

pm.test("Status OK", function () {
    pm.response.to.have.status("OK");
});

pm.test("Status is 200 OK", function () {
     pm.expect(pm.response.code).to.be.oneOf([200]); 
});

----------------------------------------------
get by id author :


pm.test("Data Contain id , idbook , firstname , lastname", function () {
    pm.expect(pm.response.text()).to.include("id");
    pm.expect(pm.response.text()).to.include("idBook");
    pm.expect(pm.response.text()).to.include("firstName"); 
    pm.expect(pm.response.text()).to.include("lastName");
});


pm.test("Status OK", function () {
    pm.response.to.have.status("OK");
});

pm.test("Status is 200 OK", function () {
     pm.expect(pm.response.code).to.be.oneOf([200]); 
});
---------------------------------------
update DATA:

pm.test("Data Contain id , idbook , firstname , lastname", function () {
    pm.expect(pm.response.text()).to.include("id");
    pm.expect(pm.response.text()).to.include("idBook");
    pm.expect(pm.response.text()).to.include("firstName"); 
    pm.expect(pm.response.text()).to.include("lastName");
});


pm.test("Author Updated Successfully", function () {
    pm.response.to.have.status("OK");
});

----------------------------------------

Delete :

pm.test("Status OK", function () {
    pm.response.to.have.status("OK");
});