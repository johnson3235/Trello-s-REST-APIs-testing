{
	"info": {
		"_postman_id": "3d2da412-65f8-4838-8bfd-506fdfbad2fd",
		"name": "Swagger",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19778653"
	},
	"item": [
		{
			"name": "Get Authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Data Contain id , idbook , firstname , lastname\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"idBook\");\r",
							"    pm.expect(pm.response.text()).to.include(\"firstName\"); \r",
							"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}",
					"host": [
						"{{BASE_URL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Data Contain id \", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Data Contain idbook \", function () {\r",
							"       pm.expect(pm.response.text()).to.include(\"idBook\");\r",
							"});\r",
							"\r",
							"pm.test(\"Data firstname mandtory \", function () {\r",
							"    pm.expect(pm.response.json().firstName).not.equal(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Data Contain lastname mandtory\", function () {\r",
							"    pm.expect(pm.response.json().lastName).not.equal(null);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"    \r",
							"\r",
							"// pm.test('Data Json Success', function () {\r",
							"//  pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");\r",
							"// });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"idBook\": 0,\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\"\r\n  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}",
					"host": [
						"{{BASE_URL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Books By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Valid Id Book\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/authors/books/{{BookId}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"authors",
						"books",
						"{{BookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get By ID author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Data Contain id , idbook , firstname , lastname\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"idBook\");\r",
							"    pm.expect(pm.response.text()).to.include(\"firstName\"); \r",
							"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/{{ID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Data Contain id , idbook , firstname , lastname\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"idBook\");\r",
							"    pm.expect(pm.response.text()).to.include(\"firstName\"); \r",
							"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Author Updated Successfully\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 1,\r\n  \"idBook\": 3,\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/{{ID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/{{ID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status is 200 OK\", function () {",
					"     pm.expect(pm.response.code).to.be.oneOf([200,201]); ",
					"});",
					"",
					"pm.test(\"Connection is live\", function () {",
					"    pm.response.to.have.header(\"Connection\");",
					"});",
					"",
					"pm.test(\"Response time is less than 1000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"",
					""
				]
			}
		}
	]
}